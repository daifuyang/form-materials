"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.stateParser = void 0;
var _traverse = _interopRequireDefault(require("@babel/traverse"));
var t = _interopRequireWildcard(require("@babel/types"));
var _parser = require("@babel/parser");
var _core = require("@babel/core");
var _transform = require("./transform");
var _defaultBabelConfig = require("../config/default-babel-config");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var stateParser = function stateParser(ast) {
  var state = {};
  (0, _traverse["default"])(ast, {
    enter: function enter(path) {
      // get state identifier or literal
      if (path.isIdentifier({
        name: 'state'
      }) || path.isLiteral({
        value: 'state'
      })) {
        var _path$container, _path$container$value;
        var properties = (_path$container = path.container) === null || _path$container === void 0 ? void 0 : (_path$container$value = _path$container.value) === null || _path$container$value === void 0 ? void 0 : _path$container$value.properties;
        if (properties) {
          properties.forEach(function (property) {
            // creat empty AST
            var code = (0, _parser.parse)('');
            code.program.body.push(t.variableDeclaration('var', [t.variableDeclarator(t.identifier('name'), property.value)]));
            var codeStr = (0, _core.transformFromAst)(code).code;
            var compiledCode = (0, _transform.transformJS)(codeStr, _defaultBabelConfig.defaultBabelConfig).code;
            if (compiledCode) {
              var _property$key$name;
              state[(_property$key$name = property.key.name) !== null && _property$key$name !== void 0 ? _property$key$name : property.key.extra.rawValue] = {
                type: 'JSExpression',
                value: compiledCode.replace('var name = ', '').replace(/;$/, '')
                // 这里的 originalCode 直接放在全局，不挂在局部
                // originCode: codeStr.replace('var name = ', '').replace(/;$/, ''),
              };
            }
          });
        }
      }
    }
  });

  return state;
};
exports.stateParser = stateParser;
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const koa_1 = __importDefault(require("koa"));
const router_1 = __importDefault(require("@koa/router"));
const fs = __importStar(require("fs-extra"));
const net = __importStar(require("net"));
const lodash_1 = require("lodash");
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("./utils");
const logger = __importStar(require("../utils/logger"));
const app = new koa_1.default();
const router = new router_1.default();
function checkUrl(item) {
    return __awaiter(this, void 0, void 0, function* () {
        const { url } = item;
        try {
            yield axios_1.default.head(url, {
                timeout: 1000,
            });
            return item;
        }
        catch (error) {
        }
    });
}
function makeJsonpStr(cbName, data) {
    return `;${cbName}(${JSON.stringify(data)})`;
}
function portIsOccupied(_port) {
    return __awaiter(this, void 0, void 0, function* () {
        const server = net.createServer().listen(_port);
        // eslint-disable-next-line no-shadow
        return new Promise((resolve) => {
            server.on('listening', () => {
                server.close();
                resolve(false);
            });
            server.on('error', () => {
                resolve(true);
            });
        });
    });
}
const PORT = 8899;
const HOST = '0.0.0.0';
const init = () => __awaiter(void 0, void 0, void 0, function* () {
    if (yield portIsOccupied(PORT)) {
        const timer = setInterval(() => __awaiter(void 0, void 0, void 0, function* () {
            const isOccupied = yield portIsOccupied(PORT);
            if (!isOccupied) {
                logger.info('Original inject server is down, start another');
                clearInterval(timer);
                init();
            }
        }), 5000);
        return;
    }
    router.get('/apis/injectInfo', (ctx, next) => __awaiter(void 0, void 0, void 0, function* () {
        ctx.res.setHeader('Access-Control-Allow-Origin', '*');
        ctx.res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , sessionToken');
        ctx.res.setHeader('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS');
        ctx.type = 'text/javascript';
        const callbackName = ctx.query.callback || 'callback';
        const filePath = (0, utils_1.getFilePath)();
        let data = {};
        try {
            data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        }
        catch (err) {
            ctx.body = makeJsonpStr(callbackName, {
                success: false,
                content: [],
            });
        }
        data = Object.values(data);
        data = (0, lodash_1.uniqWith)(data, lodash_1.isEqual); // 去重
        // check inject 是否可访问
        const checkData = (yield Promise.all(data.map(checkUrl))).filter(Boolean);
        ctx.body = makeJsonpStr(callbackName, {
            success: !(0, lodash_1.isEmpty)(data),
            content: checkData,
        });
    }));
    app
        .use(router.routes())
        .use(router.allowedMethods())
        .listen(PORT, HOST, () => {
        logger.info('Inject server started', { needBreak: true });
    });
});
exports.default = init;

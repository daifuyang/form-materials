"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs-extra"));
const utils_1 = require("./utils");
exports.default = ({ pkg, host, port, type, library }) => {
    const cacheFilePath = (0, utils_1.getFilePath)();
    fs.ensureFileSync(cacheFilePath);
    let cache = {};
    try {
        cache = JSON.parse(fs.readFileSync(cacheFilePath, 'utf-8'));
    }
    catch (e) { }
    if (type !== 'component') {
        cache[`${port}-utils`] = {
            packageName: pkg.name,
            type: type === 'plugin' ? 'designerPlugin' : 'setter',
            library,
            subType: '',
            url: `http://${host}:${port}/js/utils.js?name=${pkg.name}`,
        };
    }
    else {
        cache[`${port}-view`] = {
            packageName: pkg.name,
            library,
            type: 'view',
            url: `http://${host}:${port}/view.js?name=${pkg.name}`,
        };
        cache[`${port}-meta`] = {
            packageName: pkg.name,
            library,
            type: 'meta',
            url: `http://${host}:${port}/meta.js?name=${pkg.name}`,
        };
    }
    fs.writeFileSync(cacheFilePath, JSON.stringify(cache, null, ' '));
};
